---
title: "Final project"
author: "Ruining Zheng & Yixuan Li"
format: html
editor: visual
self-contained: true
---

```{r message=FALSE}
library(tidyverse)
library(ranger)
library(kknn)
library(readxl)
library(tigris)
library(tidycensus)
library(tidymodels)
library(ggplot2)
library(sf)
library(dotenv)
library(here)
library(utils)
library(lubridate)
library(janitor)
library(rgeoboundaries)
library(remotes)
library(patchwork)

remotes::install_github("wmgeolab/rgeoboundaries")
```

### 1. Data Collection

#### Data of electric charging station

```{r}
load_dot_env(here("C:/Users/Ruining Zheng/Desktop/GU/PPOL 670 Intro to Data Science/Final/Final_project/", ".env"))
credential <- Sys.getenv("station_api_key")
url <- str_glue("https://developer.nrel.gov/api/alt-fuel-stations/v1.csv?api_key={credential}&format=csv")

station_data <- read.csv(url) %>%
  janitor::clean_names() %>%
  select(- plus4)

charging_station <- station_data %>%
  select(station_name, city, state, zip, latitude, longitude)

charging_station_zipcode <- charging_station %>%
  group_by(zip) %>%
  summarize(count = n()) %>%
  mutate(count = if_else(count < quantile(count, 0.025), quantile(count, 0.025), if_else(count > quantile(count, 0.975), quantile(count, 0.975), count)))
```

#### Data of demographic variables from Census

```{r, message=FALSE}
census_data <- get_acs(geography = "zcta",
                        year = 2021,
                        variable = as.character(c("B01003_001E", "B19001_001E", "B08006_002E"),
                         geometry = TRUE
                         )) %>%
  janitor::clean_names() %>%
  select(-moe)
                          
geoid_location <- st_read("data/tl_2022_us_zcta520/tl_2022_us_zcta520.shp") %>%
  janitor::clean_names() %>%
  rename(geoid = geoid20) %>%
  select(geoid, geometry)

census_geometry <- left_join(x = census_data, y = geoid_location, by = "geoid") %>%
  drop_na()%>%
  rename(zip = geoid)

```

### 2. Cleaning Variables

##### Independent variables

```{r}
# We split the three independent variables and recombine them into a new tibble
census_population <- census_geometry %>%
  filter(variable == "B01003_001") %>%
  rename(population = estimate) %>%  
  mutate(population = if_else(population < quantile(population, 0.025), quantile(population, 0.025), if_else(population > quantile(population, 0.975), quantile(population, 0.975), population))) %>%  # exclude the extremes
  mutate(population = population/1000)
  
census_hhincome <- census_geometry %>%
  filter(variable == "B19001_001") %>%
  rename(hhincome = estimate) %>%
  mutate(hhincome = if_else(hhincome < quantile(hhincome, 0.025), quantile(hhincome, 0.025), if_else(hhincome > quantile(hhincome, 0.975), quantile(hhincome, 0.975), hhincome))) %>%
  select(zip, hhincome)

census_carcommute <- census_geometry %>%
  filter(variable == "B08006_002") %>%
  rename(carcommute = estimate) %>%
  mutate(carcommute = if_else(carcommute < quantile(carcommute, 0.025), quantile(carcommute, 0.025), if_else(carcommute > quantile(carcommute, 0.975), quantile(carcommute, 0.975), carcommute))) %>%
  select(zip, carcommute)

census_combination <- left_join(census_population, census_hhincome, by = "zip") %>%
  left_join(census_carcommute, by = "zip") %>%
  select(-geometry)
```

##### Combining to dependent variables

```{r}
census_station_df <- left_join(census_combination, charging_station_zipcode, by = "zip") %>%
  mutate(count = if_else(is.na(count), 0, count)) %>%
  select(population, hhincome, carcommute, count)
```

### 3. Modeling

#### Preparation

```{r}
# Split the data
set.seed(20230511)

census_split <- initial_split(data = census_station_df, prop = 0.75)
census_train <- training(x = census_split)
census_test <- training(x = census_split)

# EDA
census_train %>%
  ggplot(aes(x = population, y = count)) +
  geom_point() +
  labs(title = "Local Population and Charging Station Amount")

census_train %>%
  ggplot(aes(x = hhincome, y = count)) +
  geom_point() +
  labs(title = "Local Household Income and Charging Station Amount")

census_train %>%
  ggplot(aes(x = carcommute, y = count)) +
  geom_point() +
  labs(title = "Number of People Driving to Work and Charging Station Amount")


census_rec <- recipe(formula = count ~., data = census_train)

folds <- vfold_cv(data = census_train, v = 10)
```

#### Linear Model

```{r}
# Linear Model
lm_mod <- linear_reg() %>%
  set_engine(engine = "lm")

lm_wf <- workflow() %>%
  add_recipe(census_rec) %>%
  add_model(lm_mod)

lm_cv <- lm_wf %>%
  fit_resamples(resamples = folds)

lm_best <- lm_cv %>%
  select_best(metric = "rmse")

lm_final <- finalize_workflow(
  lm_wf,
  parameters = lm_best
)

lm_fit <- lm_final %>%
  fit(data = census_train)
```

#### Random Forest

```{r}
rand_mod <- rand_forest(mode = "regression", trees = 500) %>%
  set_engine("ranger")

rand_wf <- workflow() %>%
  add_recipe(census_rec) %>%
  add_model(rand_mod)

rand_cv <- rand_wf %>%
  fit_resamples(resamples = folds)

rand_best <- rand_cv %>%
  select_best(metric = "rmse")

rand_final <- finalize_workflow(
  rand_wf,
  parameters = rand_best
)

rand_fit <- rand_final %>%
  fit(data = census_train)
```

#### KNN Model

```{r}
knn_mod <- nearest_neighbor(neighbors = 5) %>%
  set_engine(engine = "kknn") %>%
  set_mode(mode = "regression")

knn_wf <- workflow() %>%
  add_recipe(census_rec) %>%
  add_model(knn_mod)

knn_cv <- knn_wf %>%
  fit_resamples(resamples = folds)

knn_best <- knn_cv %>%
  select_best(metric = "rmse")

knn_final <- finalize_workflow(
  knn_wf,
  parameters = knn_best
)

knn_fit <- knn_final %>%
  fit(data = census_train)
```

#### RMSE Comparison

```{r}
lm_RMSE <- lm_cv %>% 
  collect_metrics(summarize = FALSE) %>%
  filter(.metric == "rmse") %>%
  summarize(lm_avg_rmse = mean(.estimate))

lm_RMSE

rand_RMSE <- rand_cv %>% 
  collect_metrics(summarize = FALSE) %>%
  filter(.metric == "rmse") %>%
  summarize(rand_avg_rmse = mean(.estimate))

rand_RMSE

knn_RMSE <- knn_cv %>% 
  collect_metrics(summarize = FALSE) %>%
  filter(.metric == "rmse") %>%
  summarize(knn_avg_rmse = mean(.estimate))

knn_RMSE

```

Based on the results, we will choose the random forest model to apply to the test data.

### 4. Evaluation of Model

```{r}
rand_finalfinal <- rand_final %>%
  fit(data = census_train)

rand_pred <- rand_finalfinal %>%
  predict(new_data = census_test)

# Calculate RMSE based on its equation 
error = rand_pred$.pred - census_test$count 
mse <- mean(error^2) 
best_rmse <- sqrt(mse) 
best_rmse

```

Since the largest value of the number of charging station in one area with the same zipcode is 29 (after we drop the extreme values), this rmse is acceptable (about 7% of the true value). This means that our model works.

### 5. Graphing

#### Visualize the distribution of electric charging stations

```{r}
charging_sf <- charging_station %>%
  filter(state != "AK", state != "HI", state != "PR", state != "VI") %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

us_boundary <- geoboundaries(
  country = "USA",
  adm_lvl = "adm1",
  type = "SSCGS"
)

p4 <- ggplot() +
  geom_sf(data = us_boundary, alpha = 0.1) +
  geom_sf(data = charging_sf, mapping = aes(color = state, alpha = 0.25)) +
  coord_sf(xlim = c(-63, -125), ylim = c(23, 50)) +
  labs(title = "Distribution of Charging Stations Domestically") +
  theme_minimal()

ggsave("station_dis.png", p4, width = 10, height = 8, dpi = 300)

p4
```

#### Visualize Electric Vehicle Numbers

```{r}
ev_numbers <- read_excel("data/ev_state.xlsx", skip = 2) %>%
  janitor::clean_names() %>%
  filter(state != "Total") %>%
  mutate(registration_count = registration_count/10000)

ev_sf <- left_join(x = ev_numbers, y = us_boundary, by = c("state" = "shapeName")) %>%
  st_as_sf() %>%
  st_set_crs(value = 4326)

```

```{r}
p3 <- charging_sf %>%
  group_by(state) %>%
  count() %>%
  ggplot() + 
  geom_col(mapping = aes(x = state, y = n)) +
  xlab("State") +
  ylab("Number") +
  labs(title = "Numbers of Charging Station of Electric Vehicles") +
  theme(axis.text.x = element_text(angle = 50, hjust = 1))

ggsave("ev_bar.png", p3, width = 6, height = 4)

p3

station_no_cal <- charging_sf %>%
  filter(state != "CA")

p6 <- station_no_cal %>%
  group_by(state) %>%
  count() %>%
  ggplot() + 
  geom_col(mapping = aes(x = state, y = n)) +
  xlab("State") +
  ylab("Number") +
  labs(title = "Numbers of Charging Station of Electric Vehicles (Except Cal)") +
  theme(axis.text.x = element_text(angle = 50, hjust = 1))

ggsave("no_cal_station.png", p6, width = 6, height = 4)

p3 + p6
```

```{r}
p1 <- ggplot() +
  geom_sf(data = ev_sf, aes(fill = registration_count)) +
  geom_sf(data = us_boundary, alpha = 0.3, color = "white") +
  coord_sf(xlim = c(-63, -125), ylim = c(23, 50)) +
  scale_fill_gradient(low = "#E0F2F1", high = "#2E8B57") +
  labs(title = "Elecreic Vehicle Number in Each State") +
  theme_minimal()

ggsave("ev_amount.png", p1, width = 10, height = 8, dpi = 300)

p1


ev_no_cal <- ev_sf %>%
  filter(state != "California")
p5 <-ggplot() +
  geom_sf(data = ev_no_cal, aes(fill = registration_count)) +
  geom_sf(data = us_boundary, alpha = 0.3, color = "white") +
  coord_sf(xlim = c(-63, -125), ylim = c(23, 50)) +
  scale_fill_gradient(low = "#E0F2F1", high = "#2E8B57") +
  labs(title = "Elecreic Vehicle Number in Each State (Except Cal)") +
  theme_minimal()
ggsave("no_cal_ev.png", p5, width = 10, height = 8, dpi = 300)

p5

p2 <-ggplot() +
  geom_sf(data = ev_sf, aes(fill = registration_count)) +
  geom_sf(data = us_boundary, alpha = 0.3, color = "white") +
  geom_sf(data = charging_sf, mapping = aes(color = state, alpha = 0.1)) +
  coord_sf(xlim = c(-63, -125), ylim = c(23, 50)) +
  scale_fill_gradient(low = "#E0F2F1", high = "#2E8B57") +
  labs(title = "Numbers of Elecreic Vehicle and Charging Station in Each State") +
  theme_minimal()

ggsave("ev&station.png", p2, width = 10, height = 8, dpi = 300)

p2

```

#### Discussion
Future Development
Our current project still has some shortcomings due to the lack of reliable data, which probably result from the fact that the electric vehicle industry is still in its early stage of development. Here are some topics that future research can work on.
1. Build a model to predict registered electric vehicle numbers.
We did not include this topic in this project because current data about registered electric vehicles is very limited. The sample size is so small that we do not have enough observations to train the model. When the new energy industry is more developed, related data will be easily accessible and researchers could try to build a model for this.
2. Contain more control variables
We include only three independent variables in this model, which probably miss some predictors that affect the number of charging stations. Actually, the number of electric vehicles can be a useful predictor for the number of charging stations. And the number of charging stations can be useful to predict the number of electric vehicles. The relationship between these two variables deserve further exploration.
